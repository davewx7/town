{
	id: "character_component",
	is_strict: true,

	properties: {
		saturation: "decimal :: _parent.saturation",
		hue: "decimal :: _parent.hue",
		lum: "decimal :: _parent.lum",
		alpha_value: "decimal :: _parent.alpha/255.0",

		_parent: { type: "obj adventurer_avatar" },

		info: { type: "CharacterComponentInstance" },
		color_adjustments: { type: "{string -> [decimal,decimal,decimal]}" },

		_calculate_color_adjustments: "def() ->commands
		[
			set(hsv_adjust_active, false),

			if(size(adjustments) > 0, [
				set(hsv_adjust_active, true),
				set(hsv_adjust_threshold, adj.threshold or 0.05),
				set(hsv_adjust_src, lib.color.rgb_to_hsv(if(adj.rgb is [int,int,int], [adj.rgb.x/255.0, adj.rgb.y/255.0, adj.rgb.z/255.0], adj.rgb))),
				set(hsv_adjust_target, target),
			]
			where target = [decimal,decimal,decimal] <- color_adjustments[adj.name]
			where adj = adjustments[0]
			),

			if(size(adjustments) > 1, [
				set(hsv_adjust_active2, true),
				set(hsv_adjust_threshold2, adj.threshold or 0.05),
				set(hsv_adjust_src2, lib.color.rgb_to_hsv(if(adj.rgb is [int,int,int], [adj.rgb.x/255.0, adj.rgb.y/255.0, adj.rgb.z/255.0], adj.rgb))),
				set(hsv_adjust_target2, target),
			]
			where target = [decimal,decimal,decimal] <- color_adjustments[adj.name]
			where adj = adjustments[1]
			),

			if(size(adjustments) > 2, [
				set(hsv_adjust_active3, true),
				set(hsv_adjust_threshold3, adj.threshold or 0.05),
				set(hsv_adjust_src3, lib.color.rgb_to_hsv(if(adj.rgb is [int,int,int], [adj.rgb.x/255.0, adj.rgb.y/255.0, adj.rgb.z/255.0], adj.rgb))),
				set(hsv_adjust_target3, target),
			]
			where target = [decimal,decimal,decimal] <- color_adjustments[adj.name]
			where adj = adjustments[1]
			),

		]
		where adjustments = filter(info.color_adjustments or [], value.name in color_adjustments)
		",

		hsv_adjust_active: { type: "bool", default: false },
		hsv_adjust_threshold: { type: "decimal", default: 0.0 },
		hsv_adjust_src: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,1.0] },
		hsv_adjust_target: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,1.0] },

		hsv_adjust_active2: { type: "bool", default: false },
		hsv_adjust_threshold2: { type: "decimal", default: 0.0 },
		hsv_adjust_src2: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,1.0] },
		hsv_adjust_target2: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,1.0] },

		hsv_adjust_active3: { type: "bool", default: false },
		hsv_adjust_threshold3: { type: "decimal", default: 0.0 },
		hsv_adjust_src3: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,1.0] },
		hsv_adjust_target3: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,1.0] },

		render: "def() ->commands
		set(animation, {
			id: 'img',
			image: sprintf('sprites/%s', info.sheet),
			scale: 4.0,
			frames: anim.frames or 1,
			duration: anim.duration or 1000,

			x: anim.col*32,
			y: anim.row*32,
			w: 32,
			h: 32,
		})
		where anim = get_animation()
		",

		get_animation: "def() ->ComponentAnimation

		if(perfect_match != null, perfect_match,

			if(facing_match, facing_match,
				if(pose_match, pose_match, head_or_die(candidates))

				where pose_match = find(candidates, value.pose = pose)
			)

		where facing_match = find(candidates, value.pose = 'stand' and value.facing = character_facing)
		)

		where perfect_match = find(candidates, value.pose = pose and value.facing = character_facing and (value.random_chance = null or chance >= value.random_chance.x and chance <= value.random_chance.y))
		where candidates = info.animations
		where chance = 1d100
		",

		pose: { type: "string", default: "stand" },
		character_facing: { type: "string", default: "down" },
	},

	events: {
		create: "render(); _calculate_color_adjustments()",
		draw: "[
			set(facing, _parent.facing),
			set(mid_xy, _parent.mid_xy),
		]",

		click: "_parent.click_component(me, arg.mouse_button)",

		mouse_enter: "_parent.mouse_enter_component(me)",
		mouse_leave: "_parent.mouse_leave_component(me)",

		end_anim: "render()",

	},

	shader: {
		name: "character_component",

		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
        }
		",

		fragment: "
        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform vec4 u_anura_sprite_area;
		uniform float u_anura_cycle;
		uniform float u_property_saturation;
		uniform float u_property_hue;
		uniform float u_property_lum;
		uniform float u_property_alpha_value;

		uniform bool u_property_hsv_adjust_active;
		uniform float u_property_hsv_adjust_threshold;
		uniform vec3 u_property_hsv_adjust_src;
		uniform vec3 u_property_hsv_adjust_target;

		uniform bool u_property_hsv_adjust_active2;
		uniform float u_property_hsv_adjust_threshold2;
		uniform vec3 u_property_hsv_adjust_src2;
		uniform vec3 u_property_hsv_adjust_target2;

		uniform bool u_property_hsv_adjust_active3;
		uniform float u_property_hsv_adjust_threshold3;
		uniform vec3 u_property_hsv_adjust_src3;
		uniform vec3 u_property_hsv_adjust_target3;

		vec3 map_color(vec3 c, vec3 src, vec3 target, float threshold)
		{
			float diff_h = abs(c.r - src.r);
			if(diff_h > 0.5) {
				diff_h = 1.0 - diff_h;
			}

			if(diff_h > threshold || abs(c.g - src.g) > threshold || abs(c.b - src.b) > threshold) {
				return c;
			}

			return c + target - src;
		}

		vec3 rgb_to_hsv(vec3 c)
		{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}
		vec3 hsv_to_rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}
        void main()
        {
			vec2 sprite_pos = vec2((v_texcoord.x - u_anura_sprite_area.x)/u_anura_sprite_area[2],
			                       (v_texcoord.y - u_anura_sprite_area.y)/u_anura_sprite_area[3]);

			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			vec3 hsv = rgb_to_hsv(gl_FragColor.rgb);
			vec3 init = hsv;

			if(u_property_hsv_adjust_active) {
				hsv = map_color(hsv, u_property_hsv_adjust_src, u_property_hsv_adjust_target, u_property_hsv_adjust_threshold);
			}

			if(u_property_hsv_adjust_active2 && hsv == init) {
				hsv = map_color(hsv, u_property_hsv_adjust_src2, u_property_hsv_adjust_target2, u_property_hsv_adjust_threshold2);
			}

			if(u_property_hsv_adjust_active3 && hsv == init) {
				hsv = map_color(hsv, u_property_hsv_adjust_src3, u_property_hsv_adjust_target3, u_property_hsv_adjust_threshold3);
			}

            hsv[0] += u_property_hue;
            hsv[1] *= u_property_saturation;
            hsv[2] *= u_property_lum;
			gl_FragColor.rgb = hsv_to_rgb(hsv);

			gl_FragColor.a *= u_property_alpha_value;
		}
		",
	},
}

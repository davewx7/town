//this is the main object which controls the screen where you manage your
//town. When this object is created it is responsible for creating the
//town and all associated data and start the game.
{
	id: "town_controller",
	is_strict: true,
	hidden_in_game: true,

	properties: {
		state: { type: "class town_state", init: "construct('town_state')" },

		adventurer_displays: { type: "[obj adventurer_display]", default: [] },

		//function to add a new adventurer, generated randomly.
		recruit_adventurer: "def() ->commands
		[
			add(state.adventurers, [new_adventurer]),

			//create an object to display this new adventurer.
			spawn('adventurer_display', {
				x: 40,
				y: (max(map(adventurer_displays, value.y2)) or 40) + 20,
				adventurer: new_adventurer,
			}, [
				add(adventurer_displays, [child]),
			]),
		]


		where new_adventurer = lib.generator.generate_adventurer()
		",

		show_gui: "def() ->commands [
			//create a button that lets us recruit adventurers.
			spawn('button_controller', {
				x: 20,
				y: 540,
				text: 'Recruit Adventurer',
				button_width: 260,
				button_height: 30,
				on_click: me.recruit_adventurer,
			}, [
				set(_recruit_button, child),
			]),

			spawn('button_controller', {
				x: 350,
				y: 540,
				text: 'Manage Quests',
				button_width: 260,
				button_height: 30,
				on_click: def() ->commands
				spawn('quest_controller', {
				x: 50,
				y: 50,
				zorder: 1000
				})
			}, [
				set(_quest_button, child),
			])
		]",


		_recruit_button: { type: "null|obj button_controller" },

		_quest_button: { type: "null|obj button_controller" },
	},

	events: {
		create: "show_gui()"

	},
}

{
	id: "adventurer_avatar",
	is_strict: true,

	hidden_in_game: true,

	properties: {
		saturation: { type: "decimal", default: 1.0 },
		hue: { type: "decimal", default: 0.0 },
		lum: { type: "decimal", default: 1.0 },

		_components: { type: "[obj character_component]", default: [] },		

		adventurer: { type: "class adventurer_state" },

		appearance: "CharacterInstance :: adventurer.appearance",

		set_clip_area: "def(null|[int] area, bool is_absolute) ->commands
		[
			set(clip_area, area),
			set(clip_area_absolute, is_absolute),
			map(_components, [
				set(value.clip_area, area),
				set(value.clip_area_absolute, is_absolute),
			]),
		]
		",

		create_components: "def() ->commands
		map(character_type.components,
			if(component_index != -1 and value.variations[component_index] != null,
			[
				spawn('character_component', {
					_parent: me,
					info: component_instance,
					zorder: zorder + value.zorder,
					color_adjustments: if(component_info != null, component_info.colors) or {},
					use_absolute_screen_coordinates: use_absolute_screen_coordinates,
				}, [
					add(_components, [child]),
				]),

				if(value.name not in appearance.components, set(appearance.components[value.name], { index: component_index })),
			]
				where component_instance = CharacterComponentInstance<- value.variations[component_index]
			)

			where component_index = if(component_info != null, component_info.index, value.optional != true, 0, -1)
			where component_info = appearance.components[value.name]
		)
		where character_type = lib.character_info.get_character(appearance.type)
		",

		//since an avatar is represented by several components they each
		//get mouse events which they pass to us. We have to do annoying
		//logic to work out mouse events occurring on the entire object.

		click_component: "def(obj character_component comp, int mouse_button) ->commands
			
		",

		mouse_enter_component: "def(obj character_component comp) ->commands
			if(comp not in _mouseover_components, add(_mouseover_components, [comp]))
		",

		mouse_leave_component: "def(obj character_component comp) ->commands
			set(_mouseover_components, filter(_mouseover_components, value != comp))
		",

		click: "def(int nbutton) ->commands if(_last_click != cycle, [
			set(_last_click, cycle),
		])",

		_last_click: { type: "null|int" },

		is_mouseover: { type: "bool", default: false },
		_mouseover_components: { type: "[obj character_component]", default: [] },

		_process_mouse: "def() ->commands
			if(is_mouseover != mouseover_state, [
				set(is_mouseover, mouseover_state),
				if(mouseover_state, mouse_enter(), mouse_leave()),
			]
			)
			where mouseover_state = (_mouseover_components != [])
		",


		mouse_enter: "def() ->commands execute(me, [
			remove_object(_tooltip),
			spawn('adventurer_display', {
				x: x2,
				mid_y: mid_y,
				adventurer: adventurer,
				zorder: zorder+10,
			}, [
				set(_tooltip, child),
			]),
		])",

		mouse_leave: "def() ->commands execute(me, [
			remove_object(_tooltip),
			set(_tooltip, null),
		])",

		_tooltip: { type: "null|obj adventurer_display" },

		set_pose: "def(string pose, null|string face=null) ->commands
		if([pose,facing_dir] != _pose or facing != left_right_facing, [
			set(facing, left_right_facing),
			set(_pose, [pose,facing_dir]),
			map(_components, [
				set(value.facing, left_right_facing),
				set(value.pose, pose),
				set(value.character_facing, facing_dir);
				value.render()
			])
		])
		where left_right_facing = if(face = 'left', -1, 1)
		where facing_dir = string<- if(face = null and _pose = null, 'down', face = null and _pose != null, _pose[1], face = 'left', 'right', face)
		",

		get_pose: "def()->string if(_pose = null, 'stand', _pose[0])",
		get_facing: "def()->string if(_pose = null, 'down', _pose[1])",

		_pose: { type: "[string,string]|null" },

		//if set, will walk within these bounds.
		_walk_area: { type: "null|[int,int,int,int]" },

		_next_walk_action: { type: "int", default: 0 },

		//really basic random walking algorithm we have for now.
		_process_walking: "def() ->commands
		if(_walk_area != null and cycle > _next_walk_action,
			
			[
				set_pose(next_pose, next_facing),
				set(_next_walk_action, cycle + min(60 + 2d60, if(next_pose = 'stand', 1000, _distance_to_walk_boundary(next_facing) / (_walk_velocity/100)))),

				if(next_pose = 'stand', [
					set(velocity_x, 0),
					set(velocity_y, 0),
				], [
					set(velocity_x, if(next_facing = 'left', -_walk_velocity, next_facing = 'right', _walk_velocity, 0)),
					set(velocity_y, if(next_facing = 'up', -_walk_velocity, next_facing = 'down', _walk_velocity, 0)),
				])
			]

			where next_facing = if(get_pose() = 'walk' and next_pose = 'stand', get_facing(), choose(filter(['left', 'right', 'up', 'down'], _distance_to_walk_boundary(value) > 50)))
			where next_pose = if(get_pose() = 'stand', 'walk', choose(['walk', 'stand']))
		)
		",

		_walk_velocity: "int :: 200",

		//tells us how far we can go until our walk boundary in the given direction
		_distance_to_walk_boundary: "def(string dir) ->int
			if(dir = 'up', mid_y - _walk_area[1],
			   dir = 'down', _walk_area[3] - mid_y,
			   dir = 'left', mid_x - _walk_area[0],
			   _walk_area[2] - mid_x)
			asserting _walk_area != null
		",

	},

	events: {
		create: "create_components()",
		being_removed: "map(_components, remove_object(value)); remove_object(_tooltip)",

		process: "[_process_mouse(), _process_walking()]",

	},

	
}

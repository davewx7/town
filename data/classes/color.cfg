{
	rgb_to_hsv: "def([decimal,decimal,decimal] c) ->[decimal,decimal,decimal]
		
		[abs(q.z + (q.a - q.y) / (6.0 * dd + e)), dd / (q.x + e), q.x]
		where e = 0.0000001
		where dd = q.x - (decimal :: min(q.a, q.y))
		where q = mix_vec4([p.x, p.y, p[3], c.r], [c.r, p.y, p.z, p.x], step(p.x, c.r))
		where p = mix_vec4([c.b, c.g, k[3], k.z], [c.g, c.b, k.x, k.y], step(c.b, c.g))
		where k = [0.0, -1.0/3.0, 2.0/3.0, -1.0]

		where step = def(decimal edge, decimal x) ->decimal if(x < edge, 0.0, 1.0)
	",

	hsv_to_rgb: "def([decimal,decimal,decimal] c) ->[decimal,decimal,decimal]
		[res.r*c.z, res.g*c.z, res.b*c.z]
		where res = mix_vec3([k.x,k.x,k.x], [clamp(p.x - k.x, 0.0, 1.0), clamp(p.y - k.x, 0.0, 1.0), clamp(p.z - k.x, 0.0, 1.0)], c.y)
		where p = [abs(fract(c.x + k.x)*6.0 - k.a), abs(fract(c.x + k.y)*6.0 - k.a), abs(fract(c.x + k.z)*6.0 - k.a)]
		where k = [1.0, 2.0/3.0, 1.0/3.0, 3.0]

		where fract = def(decimal a) ->decimal (a - floor(a))
	",

	mix_vec3: "def([decimal,decimal,decimal] a, [decimal,decimal,decimal] b, decimal r) -> [decimal,decimal,decimal]
		[mix(a.x, b.x, r), mix(a.y, b.y, r), mix(a.z, b.z, r)]
	",

	mix_vec4: "def([decimal,decimal,decimal,decimal] a, [decimal,decimal,decimal,decimal] b, decimal r) -> [decimal,decimal,decimal,decimal]
		[mix(a.x, b.x, r), mix(a.y, b.y, r), mix(a.z, b.z, r), mix(a.a, b.a, r)]
	",
}

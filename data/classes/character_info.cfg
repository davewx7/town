{
	all_character_types: {
		type: "{string -> CharacterType}",
		init: "{string -> CharacterType} <- get_document('data/character-types.cfg')",
	},

	get_character: "def(string id) ->CharacterType
		res
		where res = CharacterType<- all_character_types[id]
	",

	generate_character_instance: "def(string t, enum{male, female} gender) ->CharacterInstance
	{
		type: t,
		components: fold(map(character_type.components,
		{
			(value.name): {
				index: index(value.variations, choice)
				where choice = choose(filter(value.variations, value = null or (value.gender = null or value.gender = gender_str))),

				colors: colors,
			},
		}
		), a+b, {}),
	}
	//calculate out our palette choices. Have to get them from the character type
	//and convert to hsv.
	where colors = if(character_type.palettes = null, {},
		fold(map({string -> [[int,int,int]]}<- character_type.palettes,
		     {(key): lib.color.rgb_to_hsv([color.r/255.0, color.g/255.0, color.b/255.0]) where color = choose(value)}), a+b, {})
	)
	where character_type = get_character(t)
	where gender_str = if(gender = enum male, 'male', 'female')
	",
}
